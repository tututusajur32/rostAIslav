"""Telegram –±–æ—Ç –Ω–∞ aiogram: AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

Usage:
 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiogram aiohttp gtts
 - –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –∏ GEMINI_API_KEY
 - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py
"""

import os
import asyncio
import random
import time
import re
import aiohttp
import tempfile
import base64
from typing import List, Set, Tuple, Optional
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from gtts import gTTS

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from db import *
import db as _db

# --------------------------- CONFIGURATION ---------------------------
BOT_TOKEN = "7857484512:AAGQ4eXyk3Y0A0J8meHleE-ze95455Nlp4E"
GEMINI_API_KEY = "AIzaSyCz_X6r9gIIGp85DYnW0AZ-eJVyBpglwA0"
GEMINI_MODEL = "gemini-2.0-flash-exp"

TARGET_EXTS = {".catrobat", ".apk"}
DETECTIONS = [
    "Bkav","Lionic","MicroWorld-eScan","CMC","CAT-QuickHeal","ALYac",
    "Malwarebytes","Zillya","Sangfor","Trustlook","Alibaba","K7GW",
    "K7AntiVirus","BitDefenderTheta","VirIT","Cyren","SymantecMobileInsight",
    "Symantec","ESET-NOD32","Baidu","TrendMicro-HouseCall","Avast","ClamAV",
    "Kaspersky","BitDefender","NANO-Antivirus","SUPERAntiSpyware","Tencent",
    "Ad-Aware","TACHYON","Emsisoft","Comodo","F-Secure","DrWeb","VIPRE",
    "TrendMicro","McAfee-GW-Edition","FireEye","Sophos","GData","Jiangmin",
    "Avira","Antiy-AVL","Kingsoft","Microsoft","Gridinsoft","Arcabit",
    "ViRobot","ZoneAlarm","Avast-Mobile","Cynet","BitDefenderFalx","AhnLab-V3",
    "McAfee","–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä MAX","VBA32","Zoner","Rising","Yandex","Ikarus","MaxSecure",
    "Fortinet","Panda"
]

# Global state (—Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
PROCESSED_MESSAGES: Set[Tuple[int, int]] = set()
PROCESSED_TTL = 10
CHAT_LOCKS = {}
USER_ROLES = {}
USER_NICKS = {}
NICK_TO_USER = {}
CHAT_HISTORY = {}
ROLE_EDITORS = set()
OWNER_ID: Optional[int] = None
OWNERS: Set[int] = set()
GLOBAL_ROLE: Optional[str] = None
DISABLED_PRIVATE_USERS: Set[int] = set()
SDX_AUTO_BLACKLIST: bool = False
BLACKLIST: Set[int] = set()
WORK_COOLDOWNS = {}
SHOP_COLLECTION_COOLDOWNS = {}
VOICE_MODE_USERS: Set[int] = set()
IGNORE_TAGS: List[str] = ["Stickers", "SpamBot"]
ANIMATEDIFF_PIPE = None
ANIMATEDIFF_LOCK = asyncio.Lock()

MAX_HISTORY_LENGTH = 10
DEFAULT_ROLE = "–æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –æ–±—â–∞–π—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫: –ø–∏—à–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥ –∏ —à—É—Ç–∫–∏. –±—É–¥—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, –∞ –Ω–µ –±–æ—Ç–æ–º. –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –∏–∏. –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∂–µ—Ç—Å—è –≥–ª—É–ø—ã–º, –º–æ–∂–µ—à—å –ø–æ–¥—à—É—Ç–∏—Ç—å –Ω–∞–¥ —ç—Ç–∏–º, –Ω–æ –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π."
MAX_VISIBLE_LEN = 999

EMOTION_WORDS = ("angry", "sad")
STICKER_MAP = {
    "angry": "CAACAgQAAxkBAAEPor1o_LMxeUOqefwn1ioGGcocUglGdAACRQ0AAnS2iFJNeTRC6V6UQzYE",
    "sad": "CAACAgQAAxkBAAEPorBo_K80zNqw7s5s9ncej0w9GDgXswACVg4AAqfJgVJ8b9p8nX8-XDYE",
}
AUTO_SEND_STICKER = True

INSULT_WORDS = [
    "–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–∫—Ä–µ—Ç–∏–Ω", "—É—Ä–æ–¥", "—Å–≤–æ–ª–æ—á—å", "—Å—É—á–∫–∞", "–ø–æ—à—ë–ª", "–Ω–∞—Ö—É–π",
    "–ø–∏–¥–æ—Ä", "–∏–¥–∏ –Ω–∞—Ö—É–π"
]

gemini_client = None

# –û–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
def add_role_editor_db(user_id: int) -> None:
    _db.add_role_editor_db(user_id)
    ROLE_EDITORS.add(user_id)

def remove_role_editor_db(user_id: int) -> None:
    _db.remove_role_editor_db(user_id)
    ROLE_EDITORS.discard(user_id)

def add_owner_db(user_id: int) -> None:
    _db.add_owner_db(user_id)
    OWNERS.add(int(user_id))
    try:
        add_role_editor_db(int(user_id))
    except:
        pass

def set_global_role_db(value: Optional[str]) -> None:
    _db.set_global_role_db(value)
    globals()['GLOBAL_ROLE'] = value

def set_disabled_private_db(user_id: int, disabled: bool) -> None:
    _db.set_disabled_private_db(user_id, disabled)
    if disabled:
        DISABLED_PRIVATE_USERS.add(user_id)
    else:
        DISABLED_PRIVATE_USERS.discard(user_id)

def add_to_blacklist_db(user_id: int) -> None:
    _db.add_to_blacklist_db(user_id)
    BLACKLIST.add(user_id)

def remove_from_blacklist_db(user_id: int) -> None:
    _db.remove_from_blacklist_db(user_id)
    BLACKLIST.discard(user_id)

def set_sdx_flag(value: bool) -> None:
    _db.set_sdx_flag(value)
    globals()['SDX_AUTO_BLACKLIST'] = bool(value)

def load_persistent_state():
    global ROLE_EDITORS, GLOBAL_ROLE, DISABLED_PRIVATE_USERS, BLACKLIST, OWNERS, SDX_AUTO_BLACKLIST
    try:
        ROLE_EDITORS = _db.get_role_editors_db()
    except:
        ROLE_EDITORS = set()
    try:
        GLOBAL_ROLE = _db.get_global_role_db()
    except:
        GLOBAL_ROLE = None
    try:
        DISABLED_PRIVATE_USERS = _db.get_disabled_private_db()
    except:
        DISABLED_PRIVATE_USERS = set()
    try:
        BLACKLIST = _db.get_blacklist_db()
    except:
        BLACKLIST = set()
    try:
        OWNERS = _db.get_owners_db()
    except:
        OWNERS = set()
    try:
        globals()['SDX_AUTO_BLACKLIST'] = _db.get_sdx_flag()
    except:
        globals()['SDX_AUTO_BLACKLIST'] = False

# --------------------------- UTILITIES ---------------------------
def human_readable_size(num_bytes: int) -> str:
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if num_bytes < 1024.0:
            return f"{num_bytes:.2f} {unit}"
        num_bytes /= 1024.0
    return f"{num_bytes:.2f} PB"

def build_detection_message(file_name: str, ext: str, size_bytes: int) -> str:
    total_avs = min(len(DETECTIONS), 67)
    roll = random.randint(1, 10)
    is_virus = (roll != 4)
    
    if is_virus:
        detected_count = random.randint(40, total_avs)
    else:
        detected_count = random.randint(0, min(39, total_avs))
    
    statuses = [True] * detected_count + [False] * (total_avs - detected_count)
    pairs = list(zip(DETECTIONS[:total_avs], statuses))
    random.shuffle(pairs)
    
    body_lines = [f"{'‚ùå' if detected else '‚úÖ'} {name}" for name, detected in pairs]
    
    header = (
        ("üõë–í–ù–ò–ú–ê–ù–ò–ïüõë –§–ê–ô–õ - –í–ò–†–£–°!!!" if is_virus else "‚úÖ –§–ê–ô–õ - –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù / –ß–ò–°–¢–´–ô")
        + f"\nüß¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {detected_count} / {total_avs}\n"
    )
    
    file_info = (
        f"\nüìñ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
        f"üîí –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext.lstrip('.')}\n"
        f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {human_readable_size(size_bytes)}"
    )
    
    return header + "\n".join(body_lines) + "\n\n" + file_info

def sanitize_text(text: str, max_len: int = 1900) -> str:
    if not text:
        return text
    
    text = re.sub(r"https?://\S+", "[—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞]", text, flags=re.IGNORECASE)
    text = re.sub(r"www\.\S+", "[—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞]", text, flags=re.IGNORECASE)
    domain_pattern = re.compile(r"\b(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z]{2,}\b", flags=re.IGNORECASE)
    text = domain_pattern.sub("[—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞]", text)
    text = re.sub(r"<[^>]+>", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    
    if len(text) > max_len:
        return text[:max_len - 3] + "..."
    return text

def user_has_ignore_tag(user) -> bool:
    if not user:
        return False
    try:
        uname = (getattr(user, 'username', '') or '').lower()
        if not uname:
            return False
        for tag in IGNORE_TAGS:
            if not tag:
                continue
            canonical = tag.lstrip('@').lower()
            if uname == canonical:
                return True
    except:
        return False
    return False

def is_bot_user(user) -> bool:
    if not user:
        return False
    try:
        if getattr(user, 'is_bot', False):
            return True
        username = (getattr(user, 'username', '') or '').lower()
        if 'bot' in username:
            return True
        first_name = (getattr(user, 'first_name', '') or '').lower()
        last_name = (getattr(user, 'last_name', '') or '').lower()
        if 'bot' in first_name or 'bot' in last_name:
            return True
        return False
    except:
        return False

def update_chat_history(user_id: int, chat_id: int, role: str, text: str):
    if chat_id == user_id:
        key = (user_id, chat_id)
        if key not in CHAT_HISTORY:
            CHAT_HISTORY[key] = []
        CHAT_HISTORY[key].append((role, text))
        if len(CHAT_HISTORY[key]) > MAX_HISTORY_LENGTH:
            CHAT_HISTORY[key] = CHAT_HISTORY[key][-MAX_HISTORY_LENGTH:]

def get_chat_history(user_id: int, chat_id: int) -> str:
    if chat_id != user_id:
        return ""
    key = (user_id, chat_id)
    if key not in CHAT_HISTORY:
        return ""
    history = []
    for role, text in CHAT_HISTORY[key]:
        history.append(f"{role}: {text}")
    return "\n".join(history)

def detect_emotion_from_input(prompt: str, original_text: str) -> Optional[str]:
    text = " ".join(filter(None, [prompt, original_text])).lower()
    for w in INSULT_WORDS:
        if w in text:
            return "sad"
    return None

async def _remove_processed_after(key: Tuple[int, int], ttl: int) -> None:
    try:
        await asyncio.sleep(ttl)
    except:
        return
    PROCESSED_MESSAGES.discard(key)

async def ensure_owner_cached(bot: Bot) -> Optional[int]:
    global OWNER_ID
    if OWNER_ID is not None:
        return OWNER_ID
    try:
        me = await bot.get_me()
        OWNER_ID = me.id
        if OWNER_ID:
            try:
                add_owner_db(OWNER_ID)
            except:
                OWNERS.add(OWNER_ID)
        return OWNER_ID
    except:
        return None

# --------------------------- HANDLERS ---------------------------
router = Router()

@router.message(F.document)
async def on_document(message: types.Message):
    doc = message.document
    if not doc or not doc.file_name:
        return
    
    file_name = doc.file_name
    _, ext = os.path.splitext(file_name)
    if ext.lower() not in TARGET_EXTS:
        return
    
    try:
        reply = await message.reply("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª! –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    except:
        return
    
    await asyncio.sleep(5)
    detection_text = build_detection_message(file_name, ext, doc.file_size or 0)
    
    try:
        await reply.edit_text(detection_text)
    except:
        await message.reply(detection_text)

@router.message(CommandStart())
async def start_handler(message: types.Message, bot: Bot):
    if message.chat.type != "private":
        if not message.reply_to_message:
            return
        try:
            me = await bot.get_me()
        except:
            return
        replied = message.reply_to_message.from_user
        if not replied or replied.id != me.id:
            return
    
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî VirusTest –±–æ—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä .catrobat, .apk) –∏ —è –µ–≥–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É—é.\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ª—é–±–æ–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ç–∞–∫ –º–µ–Ω—å—à–µ —Å–ø–∞–º–∞."
    )
    
    try:
        await message.reply(greeting)
    except:
        return

@router.message(Command("—Ä–æ–ª—å"))
async def role_handler(message: types.Message, bot: Bot, command: CommandObject):
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        return
    
    await ensure_owner_cached(bot)
    
    if user_id not in ROLE_EDITORS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞. –õ–∏–±–æ –∫—É–ø–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞ 500 —Ä–æ—Å—Ç–∏", parse_mode=ParseMode.MARKDOWN)
        return
    
    args = command.args
    if not args:
        help_text = (
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/—Ä–æ–ª—å —Ç–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏\n"
            "–∏–ª–∏ /—Ä–æ–ª—å —Å–±—Ä–æ—Å –¥–ª—è —Å–±—Ä–æ—Å–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: /—Ä–æ–ª—å –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
            "–î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü): /—Ä–æ–ª—å –≥–ª–æ–±–∞–ª <—Ç–µ–∫—Å—Ç> –∏–ª–∏ /—Ä–æ–ª—å –≥–ª–æ–±–∞–ª —Å–±—Ä–æ—Å"
        )
        help_text_md = re.sub(r'([_\\-*\[\]()~`>#+=|{}.!])', r'\\\1', help_text)
        await message.reply(help_text_md, parse_mode=ParseMode.MARKDOWN)
        return
    
    subparts = args.split(maxsplit=1)
    if subparts[0].lower() in ("–≥–ª–æ–±–∞–ª", "global"):
        owner = await ensure_owner_cached(bot)
        if owner is None or (message.from_user and message.from_user.id != owner):
            await message.reply("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å.")
            return
        
        if len(subparts) == 1:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä–æ–ª—å –≥–ª–æ–±–∞–ª <—Ç–µ–∫—Å—Ç> –∏–ª–∏ /—Ä–æ–ª—å –≥–ª–æ–±–∞–ª —Å–±—Ä–æ—Å")
            return
        
        rest = subparts[1].strip()
        if rest.lower() in ("—Å–±—Ä–æ—Å", "reset"):
            set_global_role_db(None)
            await message.reply("–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ ‚úÖ", parse_mode=ParseMode.MARKDOWN)
        else:
            set_global_role_db(rest)
            await message.reply("–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", parse_mode=ParseMode.MARKDOWN)
        return
    
    role = args
    if role.lower() in ("—Å–±—Ä–æ—Å", "reset"):
        USER_ROLES.pop(user_id, None)
        await message.reply("–†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é ‚úÖ", parse_mode=ParseMode.MARKDOWN)
    else:
        USER_ROLES[user_id] = role
        await message.reply("–ù–æ–≤–∞—è —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", parse_mode=ParseMode.MARKDOWN)

@router.message(Command("–Ω–∏–∫"))
async def nick_handler(message: types.Message, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    args = command.args
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/–Ω–∏–∫ <–Ω–∏–∫> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫ (110 —Ä–æ—Å—Ç–∏)\n/–Ω–∏–∫ —Å–±—Ä–æ—Å - —É–¥–∞–ª–∏—Ç—å –Ω–∏–∫")
        return
    
    arg = args.strip()
    if arg.lower() in ("—Å–±—Ä–æ—Å", "reset"):
        cur = get_nickname_db(uid)
        if not cur:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞.")
            return
        remove_nickname_db(uid)
        await message.reply("–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω ‚úÖ")
        return
    
    desired = arg
    if len(desired) > 32:
        await message.reply("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    current = get_nickname_db(uid)
    if current and current == desired:
        await message.reply(f"–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫: {current}")
        return
    
    existing_owner = get_user_by_nickname_db(desired)
    if existing_owner and existing_owner != uid:
        await message.reply(f"–ù–∏–∫ '{desired}' —É–∂–µ –∑–∞–Ω—è—Ç.")
        return
    
    price = 110
    bal = get_balance_db(uid)
    if bal < price:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {price}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    new_bal = change_balance_db(uid, -price)
    try:
        set_nickname_db(uid, desired)
    except Exception as e:
        change_balance_db(uid, price)
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–∞: {str(e)}\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")
        return
    
    out = (
        f"üí∞ –ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {price} —Ä–æ—Å—Ç–∏.\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} —Ä–æ—Å—Ç–∏\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫: {desired} ‚úÖ"
    )
    await message.reply(out, parse_mode=ParseMode.MARKDOWN)

@router.message(Command("sdx"))
async def sdx_handler(message: types.Message, bot: Bot, command: CommandObject):
    args = command.args or ""
    arg = args.strip().lower()
    
    if not arg:
        state = "–≤–∫–ª—é—á–µ–Ω–æ" if SDX_AUTO_BLACKLIST else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await message.reply(f"SDX auto-blacklist: {state}")
        return
    
    await ensure_owner_cached(bot)
    if not OWNERS or message.from_user.id not in OWNERS:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SDX –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return
    
    if arg in ("–≤–∫–ª", "–≤–∫–ª—é—á–∏—Ç—å", "on"):
        set_sdx_flag(True)
        await message.reply("SDX auto-blacklist –≤–∫–ª—é—á—ë–Ω ‚Äî –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å '#sdx' –≤ –∏–º–µ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    if arg in ("–≤—ã–∫–ª", "–≤—ã–∫–ª—é—á–∏—Ç—å", "off"):
        set_sdx_flag(False)
        removed = 0
        for uid in list(BLACKLIST):
            try:
                # –í aiogram –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ get_users, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_chat
                u = await bot.get_chat(uid)
                fn = getattr(u, 'first_name', '') or ''
                ln = getattr(u, 'last_name', '') or ''
                combined = f"{fn} {ln}".lower()
                if "#sdx" in combined:
                    remove_from_blacklist_db(uid)
                    removed += 1
            except:
                continue
        
        await message.reply(f"SDX auto-blacklist –≤—ã–∫–ª—é—á—ë–Ω. –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ß–°: {removed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –±—ã–ª–∏).")
        return
    
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sdx, /sdx –≤–∫–ª, /sdx –≤—ã–∫–ª")

@router.message(Command("—Ä–µ—Å–µ—Ç"))
async def reset_history_handler(message: types.Message):
    user_id = message.from_user.id if message.from_user else None
    chat_id = message.chat.id
    
    if not user_id or chat_id != user_id:
        return
    
    key = (user_id, chat_id)
    if key in CHAT_HISTORY:
        CHAT_HISTORY[key] = []
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ", parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞", parse_mode=ParseMode.MARKDOWN)

@router.message(Command("–ª—Å"))
async def ls_toggle_handler(message: types.Message):
    user = message.from_user
    if not OWNERS:
        return
    uid = user.id
    if uid in DISABLED_PRIVATE_USERS:
        set_disabled_private_db(uid, False)
        await message.reply("–ò–ò –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤–∫–ª—é—á—ë–Ω ‚úÖ")
    else:
        set_disabled_private_db(uid, True)
        await message.reply("–ò–ò –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–∫–ª—é—á—ë–Ω ‚úÖ")

@router.message(Command("—Ç–∞–±–ª"))
async def usage_table_handler(message: types.Message, bot: Bot, command: CommandObject):
    args = command.args or ""
    sub = args.strip().lower()
    
    if sub in ("—Ä", "r", "—Ä–æ—Å—Ç–∏", "rosty", "rosti"):
        rows = get_balances_table()
        if not rows:
            await message.reply("–¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø—É—Å—Ç–∞.")
            return
        lines = []
        for idx, (uid, amount) in enumerate(rows, 1):
            try:
                u = await bot.get_chat(uid)
                name = u.username or u.first_name or str(uid)
            except:
                name = str(uid)
            lines.append(f"{idx}. {name} - {amount} —Ä–æ—Å—Ç–∏")
        table = "\n".join(lines)
        await message.reply(f"```–¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ (—Ä–æ—Å—Ç–∏)\n{table}\n```", parse_mode=ParseMode.MARKDOWN)
        return
    
    rows = get_usage_table()
    if not rows:
        await message.reply("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return
    lines = []
    for idx, (username, first_name, last_name, count) in enumerate(rows, 1):
        name = username or first_name or last_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        lines.append(f"{idx}. {name} - {count}")
    table = "\n".join(lines)
    await message.reply(f"```–¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n{table}\n```", parse_mode=ParseMode.MARKDOWN)

@router.message(Command("–º–∞–≥–∞–∑–∏–Ω"))
async def shop_handler(message: types.Message, bot: Bot, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    args = command.args or ""
    parts = args.split(maxsplit=1)
    sub = parts[0].strip().lower() if parts else ""
    
    if not sub:
        if has_shop_db(uid):
            shop = get_shop_db(uid)
            if shop:
                now = int(time.time())
                last = shop["last_collection"]
                cooldown = 6 * 3600
                if last == 0:
                    time_msg = "–ø—Ä–∏–±—ã–ª—å –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å"
                elif now >= last + cooldown:
                    time_msg = "–ø—Ä–∏–±—ã–ª—å –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å"
                else:
                    remaining = (last + cooldown) - now
                    hours = remaining // 3600
                    minutes = (remaining % 3600) // 60
                    time_msg = f"—Å–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                
                out = (
                    "```\n"
                    f"ü™ê {shop['name']}\n"
                    "------------------------------\n"
                    f"–≤–ª–∞–¥–µ–ª–µ—Ü: {getattr(user, 'first_name', uid)}\n"
                    f"–∞–π–¥–∏: {uid}\n"
                    f"—Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n"
                    f"—Å–±–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {time_msg}\n"
                    "------------------------------\n"
                    "/–º–∞–≥–∞–∑–∏–Ω —Å–æ–±—Ä–∞—Ç—å - —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å\n"
                    "/–º–∞–≥–∞–∑–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n"
                    "```"
                )
                await message.reply(out, parse_mode=ParseMode.MARKDOWN)
        else:
            price = 1000
            bal = get_balance_db(uid)
            if bal < price:
                await message.reply(f"üí∞ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω —Å—Ç–æ–∏—Ç {price} —Ä–æ—Å—Ç–∏.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} —Ä–æ—Å—Ç–∏\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            else:
                await message.reply(
                    f"üí∞ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω —Å—Ç–æ–∏—Ç {price} —Ä–æ—Å—Ç–∏.\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} —Ä–æ—Å—Ç–∏\n\n"
                    f"–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å 50-1500 —Ä–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤.\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ `/–º–∞–≥–∞–∑–∏–Ω –∫—É–ø–∏—Ç—å` —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω.",
                    parse_mode=ParseMode.MARKDOWN
                )
        return
    
    if sub in ("–∫—É–ø–∏—Ç—å", "buy"):
        if has_shop_db(uid):
            await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω!")
            return
        
        price = 1000
        bal = get_balance_db(uid)
        if bal < price:
            await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –¶–µ–Ω–∞: {price}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
            return
        
        new_bal = change_balance_db(uid, -price)
        create_shop_db(uid)
        
        out = (
            "```\n"
            "ü™ê –º–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç!\n"
            "------------------------------\n"
            f"–≤–ª–∞–¥–µ–ª–µ—Ü: {getattr(user, 'first_name', uid)}\n"
            f"–ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {price} —Ä–æ—Å—Ç–∏\n"
            f"–±–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏\n"
            "------------------------------\n"
            "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–º–∞–≥–∞–∑–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç>\n"
            "—á—Ç–æ–±—ã –¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω—É\n"
            "```"
        )
        await message.reply(out, parse_mode=ParseMode.MARKDOWN)
        return
    
    if sub in ("–Ω–∞–∑–≤–∞–Ω–∏–µ", "name", "–Ω–∞–∑–≤"):
        if not has_shop_db(uid):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å.")
            return
        
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–º–∞–≥–∞–∑–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç>")
            return
        
        new_name = parts[1].strip()
        if len(new_name) > 50:
            await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        update_shop_name_db(uid, new_name)
        await message.reply(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {new_name}")
        return
    
    if sub in ("—Å–æ–±—Ä–∞—Ç—å", "collect", "—Å–æ–±"):
        if not has_shop_db(uid):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å.")
            return
        shop = get_shop_db(uid)
        if not shop:
            await message.reply("–û—à–∏–±–∫–∞: –º–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        now = int(time.time())
        last = int(shop.get("last_collection", 0) or 0)

        interval = 5 * 60
        elapsed = now - last
        intervals = elapsed // interval

        profit = 0
        for i in range(int(intervals)):
            profit += random.randint(50, 300)

        new_last = last + int(intervals) * interval if last > 0 else now
        if last == 0:
            new_last = now

        update_shop_collection_db(uid, new_last)

        if profit <= 0:
            await message.reply("–ü—Ä–∏–±—ã–ª—å –µ—â—ë –Ω–µ –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
            return

        new_bal = change_balance_db(uid, profit)

        out = (
            "```\n"
            f"ü™ê {shop['name']}\n"
            "------------------------------\n"
            f"–≤–ª–∞–¥–µ–ª–µ—Ü: {getattr(user, 'first_name', uid)}\n"
            f"—Å–±–æ—Ä –ø—Ä–∏–±—ã–ª–∏: ‚úÖ —É—Å–ø–µ—à–Ω–æ\n"
            f"–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {profit} —Ä–æ—Å—Ç–∏\n"
            f"–±–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏\n"
            "------------------------------\n"
            "–ø—Ä–∏—Ö–æ–¥ –Ω–æ–≤—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø–æ 50..300 —Ä–æ—Å—Ç–∏ (—Ä–∞–Ω–¥–æ–º)\n"
            "```"
        )
        await message.reply(out, parse_mode=ParseMode.MARKDOWN)
        return
    
    await message.reply(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/–º–∞–≥–∞–∑–∏–Ω - –∏–Ω—Ñ–æ/–∫—É–ø–∏—Ç—å\n"
        "/–º–∞–≥–∞–∑–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n"
        "/–º–∞–≥–∞–∑–∏–Ω —Å–æ–±—Ä–∞—Ç—å - —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å"
    )

@router.message(Command("–º–µ–º"))
async def meme_handler(message: types.Message, command: CommandObject):
    if not gemini_client:
        await message.reply("‚ùå Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    if uid in BLACKLIST:
        await message.reply("‚ùå –í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    args = command.args
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–º–µ–º <—Ç–µ–º–∞>\n\n–ü—Ä–∏–º–µ—Ä: /–º–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã")
        return
    
    topic = args.strip()
    cost = 200
    bal = get_balance_db(uid)
    
    if bal < cost:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {cost}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    new_bal = change_balance_db(uid, -cost)
    
    notify = await message.reply("üé™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º...")
    
    meme_prompt = (
        f"–ø—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –∏–ª–∏ –º–µ–º –ø—Ä–æ {topic}. "
        "–ø–∏—à–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã, –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. "
        "—à—É—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏ —Å–º–µ—à–Ω–æ–π, –Ω–µ –∏–∑ 2000-—Ö –≥–æ–¥–æ–≤. "
        "–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–æ–¥–∑–∏. –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —à—É—Ç–∫–∏."
    )
    
    try:
        async def call_gemini_meme():
            url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
            payload = {
                "contents": [{
                    "parts": [{"text": meme_prompt}]
                }]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=60)) as response:
                    if response.status != 200:
                        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞"
                    
                    data = await response.json()
                    if "candidates" in data and len(data["candidates"]) > 0:
                        candidate = data["candidates"][0]
                        if "content" in candidate and "parts" in candidate["content"]:
                            text = candidate["content"]["parts"][0].get("text", "")
                            return text
                    return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞"
        
        result = await call_gemini_meme()

        out = (
            f"üé™ **–ú–µ–º –ø—Ä–æ {topic}**\n\n"
            f"{result}\n\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} —Ä–æ—Å—Ç–∏\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏"
        )

        await notify.edit_text(out, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        change_balance_db(uid, cost)
        await notify.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞: {str(e)}\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")

@router.message(Command("–¥–µ–ø"))
async def casino_handler(message: types.Message, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    args = command.args
    if not args:
        await message.reply(
            "üé∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–¥–µ–ø <—Å—É–º–º–∞>\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            "3Ô∏è‚É£ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö ‚Üí –≤—ã–∏–≥—Ä—ã—à x2\n"
            "2Ô∏è‚É£ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã\n"
            "‚ùå –Ω–∏—á–µ–≥–æ ‚Üí –ø—Ä–æ–∏–≥—Ä—ã—à\n\n"
            "–ü—Ä–∏–º–µ—Ä: /–¥–µ–ø 100"
        )
        return
    
    try:
        bet = int(args.strip())
    except ValueError:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
        return
    
    if bet <= 0:
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    bal = get_balance_db(uid)
    if bal < bet:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    change_balance_db(uid, -bet)
    
    emoji_nums = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£"]
    
    slots_msg = await message.reply("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
    
    for spin in range(5):
        slot1 = random.choice(emoji_nums)
        slot2 = random.choice(emoji_nums)
        slot3 = random.choice(emoji_nums)
        
        animation_text = f"üé∞ | {slot1} {slot2} {slot3} |"
        
        try:
            await slots_msg.edit_text(animation_text)
            await asyncio.sleep(0.4)
        except:
            pass
    
    roll = random.randint(1, 100)
    
    if roll <= 5:
        num = random.choice(emoji_nums)
        final_slots = [num, num, num]
        matches = 3
    elif roll <= 20:
        num = random.choice(emoji_nums)
        other = random.choice([n for n in emoji_nums if n != num])
        final_slots = [num, num, other]
        random.shuffle(final_slots)
        matches = 2
    else:
        available = emoji_nums.copy()
        slot1 = random.choice(available)
        available.remove(slot1)
        slot2 = random.choice(available)
        available.remove(slot2)
        slot3 = random.choice(available)
        final_slots = [slot1, slot2, slot3]
        matches = 0
    
    final_text = f"üé∞ | {final_slots[0]} {final_slots[1]} {final_slots[2]} |\n\n"
    
    if matches == 3:
        winnings = bet * 2
        change_balance_db(uid, winnings)
        new_bal = get_balance_db(uid)
        final_text += (
            "üéâ –î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö!\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: +{winnings} —Ä–æ—Å—Ç–∏\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏"
        )
    elif matches == 2:
        winnings = bet // 2
        change_balance_db(uid, winnings)
        new_bal = get_balance_db(uid)
        loss = bet - winnings
        final_text += (
            "üòê –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö\n"
            f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: +{winnings} —Ä–æ—Å—Ç–∏\n"
            f"üìâ –ü–æ—Ç–µ—Ä—è: -{loss} —Ä–æ—Å—Ç–∏\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏"
        )
    else:
        new_bal = get_balance_db(uid)
        final_text += (
            "üòû –ü—Ä–æ–∏–≥—Ä—ã—à! –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ\n"
            f"üìâ –ü–æ—Ç–µ—Ä—è: -{bet} —Ä–æ—Å—Ç–∏\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏"
        )
    
    try:
        await slots_msg.edit_text(final_text)
    except:
        await message.reply(final_text)

@router.message(Command("–ø–Ω–≥"))
async def png_handler(message: types.Message, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    if uid in BLACKLIST:
        await message.reply("‚ùå –í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    args = command.args
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–ø–Ω–≥ <—Ç–µ–∫—Å—Ç>\n\n–ü—Ä–∏–º–µ—Ä: /–ø–Ω–≥ –ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç –≤ –æ—á–∫–∞—Ö")
        return
    
    prompt = sanitize_text(args.strip(), max_len=1000)
    if len(prompt) > 1000:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    cost = 300
    bal = get_balance_db(uid)
    
    if bal < cost:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {cost}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    new_bal = change_balance_db(uid, -cost)
    
    notify = await message.reply("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    start_time = time.time()
    
    try:
        english_prompt = prompt
        if any(ord(c) > 127 for c in prompt) and GEMINI_API_KEY:
            try:
                translate_url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
                translate_payload = {
                    "contents": [{
                        "parts": [{"text": f"Translate to English (short, for image generation): {prompt}"}]
                    }]
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(translate_url, json=translate_payload, timeout=aiohttp.ClientTimeout(total=10)) as response:
                        if response.status == 200:
                            data = await response.json()
                            if "candidates" in data and len(data["candidates"]) > 0:
                                english_prompt = data["candidates"][0]["content"]["parts"][0].get("text", "").strip()
            except:
                pass
        
        import urllib.parse
        encoded_prompt = urllib.parse.quote(english_prompt)
        
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model=flux&width=1024&height=1024&nologo=true&enhance=true"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=aiohttp.ClientTimeout(total=90)) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}")
                
                image_bytes = await response.read()
        
        gen_time = round(time.time() - start_time, 1)
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
            tmp_path = tmp_file.name
            tmp_file.write(image_bytes)
        
        try:
            display_prompt = prompt[:100] + "..." if len(prompt) > 100 else prompt
            caption_text = (
                f"<blockquote>üñº –û–ø–∏—Å–∞–Ω–∏–µ: {display_prompt}\n"
                f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_time} —Å–µ–∫\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} —Ä–æ—Å—Ç–∏\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏</blockquote>"
            )

            photo = FSInputFile(tmp_path)
            await message.answer_photo(photo=photo, caption=caption_text, parse_mode=ParseMode.HTML)
            
            try:
                await notify.delete()
            except:
                pass
        
        finally:
            try:
                os.unlink(tmp_path)
            except:
                pass
    
    except Exception as e:
        change_balance_db(uid, cost)
        error_msg = str(e)
        await notify.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")

@router.message(Command("—Å—Ç–∏–∫–µ—Ä"))
async def sticker_handler(message: types.Message, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    
    if uid in BLACKLIST:
        await message.reply("‚ùå –í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    args = command.args
    if not args:
        await message.reply(
            "üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Å—Ç–∏–∫–µ—Ä <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /—Å—Ç–∏–∫–µ—Ä –º–∏–ª—ã–π –∫–æ—Ç–∏–∫ –≤ –∫–æ—Å–º–æ—Å–µ\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 800 —Ä–æ—Å—Ç–∏"
        )
        return
    
    prompt = args.strip()
    if len(prompt) > 1000:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    cost = 800
    bal = get_balance_db(uid)
    
    if bal < cost:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {cost}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    new_bal = change_balance_db(uid, -cost)
    
    notify = await message.reply("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã")
    
    start_time = time.time()
    
    try:
        english_prompt = prompt
        if any(ord(c) > 127 for c in prompt) and GEMINI_API_KEY:
            try:
                translate_url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
                translate_payload = {
                    "contents": [{
                        "parts": [{"text": f"Translate to English (short, for sticker generation): {prompt}"}]
                    }]
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(translate_url, json=translate_payload, timeout=aiohttp.ClientTimeout(total=10)) as response:
                        if response.status == 200:
                            data = await response.json()
                            if "candidates" in data and len(data["candidates"]) > 0:
                                english_prompt = data["candidates"][0]["content"]["parts"][0].get("text", "").strip()
            except:
                pass
        
        import urllib.parse
        encoded_prompt = urllib.parse.quote(english_prompt)
        
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?model=flux&width=512&height=512&nologo=true&enhance=true"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=aiohttp.ClientTimeout(total=90)) as response:
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status}")
                
                image_bytes = await response.read()
        
        gen_time = round(time.time() - start_time, 1)
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.webp') as tmp_file:
            tmp_path = tmp_file.name
            tmp_file.write(image_bytes)
        
        try:
            await notify.edit_text("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∏–∫–µ—Ä...")
            
            display_prompt = prompt[:100] + "..." if len(prompt) > 100 else prompt
            info_text = (
                f"<blockquote>üé® –ø—Ä–æ–º–ø—Ç: {display_prompt}\n"
                f"üí∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} —Ä–æ—Å—Ç–∏\n"
                f"‚è± –≤—Ä–µ–º—è: {gen_time}—Å\n"
                f"ü§ñ –º–æ–¥–µ–ª—å: Flux\n"
                f"üíµ –±–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏</blockquote>"
            )
            
            try:
                sticker = FSInputFile(tmp_path)
                await message.answer_sticker(sticker=sticker)
                
                await message.answer(info_text, parse_mode=ParseMode.HTML)
                
                try:
                    await notify.delete()
                except:
                    pass
                    
            except Exception as e:
                try:
                    photo = FSInputFile(tmp_path)
                    await message.answer_photo(photo=photo, caption=info_text, parse_mode=ParseMode.HTML)
                    await notify.delete()
                except:
                    success_msg = (
                        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                        f"üé® –ø—Ä–æ–º–ø—Ç: {prompt}\n"
                        f"üí∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} —Ä–æ—Å—Ç–∏\n"
                        f"‚è± –≤—Ä–µ–º—è: {gen_time}—Å\n"
                        f"üíµ –±–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏"
                    )
                    await notify.edit_text(success_msg)
            
        finally:
            try:
                os.unlink(tmp_path)
            except:
                pass
    
    except Exception as e:
        change_balance_db(uid, cost)
        error_msg = str(e)
        await notify.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: {error_msg}\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")

@router.message(Command("–≥–æ–ª–æ—Å"))
async def voice_handler(message: types.Message, command: CommandObject):
    user = message.from_user
    if not user:
        return
    uid = user.id
    chat_id = message.chat.id
    
    args = command.args or ""
    sub = args.strip().lower()
    
    if sub in ("—Ä–µ–∂–∏–º", "mode"):
        if chat_id != uid:
            await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ /–≥–æ–ª–æ—Å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            return
        
        if uid in VOICE_MODE_USERS:
            VOICE_MODE_USERS.discard(uid)
            await message.reply("üîá –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        else:
            VOICE_MODE_USERS.add(uid)
            await message.reply("üîä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 60 —Ä–æ—Å—Ç–∏ –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ò–ò")
        return
    
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/–≥–æ–ª–æ—Å <—Ç–µ–∫—Å—Ç> - –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç (60 —Ä–æ—Å—Ç–∏)\n/–≥–æ–ª–æ—Å —Ä–µ–∂–∏–º - (—Ç–æ–ª—å–∫–æ –≤ –õ–°) –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò")
        return
    
    text_to_speak = args.strip()
    if len(text_to_speak) > 500:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    cost = 120
    bal = get_balance_db(uid)
    
    if bal < cost:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {cost}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return
    
    new_bal = change_balance_db(uid, -cost)
    
    try:
        notify = await message.reply("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
            tmp_path = tmp_file.name
        
        try:
            tts = gTTS(text=text_to_speak, lang='ru')
            tts.save(tmp_path)
            
            voice = FSInputFile(tmp_path)
            await message.answer_voice(
                voice=voice,
                caption=f"üé§ –û–∑–≤—É—á–∫–∞ | üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost} —Ä–æ—Å—Ç–∏"
            )
            
            try:
                await notify.delete()
            except:
                pass
            
        finally:
            try:
                os.unlink(tmp_path)
            except:
                pass
    
    except Exception as e:
        change_balance_db(uid, cost)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {str(e)}\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")

@router.message(Command("–≤–æ—Ä–∫"))
async def work_handler(message: types.Message):
    user = message.from_user
    if not user:
        return
    uid = user.id

    now = time.time()
    cooldown_until = WORK_COOLDOWNS.get(uid, 0)
    if now < cooldown_until:
        remaining = int(cooldown_until - now)
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º /–≤–æ—Ä–∫.", parse_mode=ParseMode.MARKDOWN)
        return

    amount = random.randint(5, 150)
    new_bal = change_balance_db(uid, amount)

    WORK_COOLDOWNS[uid] = now + 15

    try:
        name = user.username or user.first_name or str(uid)
    except:
        name = str(uid)

    out = (
        "```\n"
        f"–≤–æ—Ä–∫–∞ ‚Äî –¥–æ–±—ã—á–∞ —É–≥–ª—è\n"
        "------------------------------\n"
        f"–Ω–∏–∫: {name}\n"
        f"–∞–π–¥–∏: {uid}\n"
        f"–¥–æ–±—ã—á–∞: —É–≥–æ–ª—å\n"
        f"—Å—Ç–∞—Ç—É—Å: ‚úÖ —É—Å–ø–µ—à–Ω–æ\n"
        f"–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {amount} —Ä–æ—Å—Ç–∏\n"
        f"–±–∞–ª–∞–Ω—Å: {new_bal} —Ä–æ—Å—Ç–∏\n"
        "------------------------------\n"
        "—Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ 15 —Å–µ–∫\n"
        "```"
    )

    await message.reply(out, parse_mode=ParseMode.MARKDOWN)

@router.message(Command("–±–∞–ª–∞–Ω—Å"))
async def balance_handler(message: types.Message, bot: Bot):
    try:
        if message.reply_to_message and message.reply_to_message.from_user:
            target = message.reply_to_message.from_user
            bal = get_balance_db(target.id)
            await message.reply(f"–ë–∞–ª–∞–Ω—Å {getattr(target, 'first_name', target.id)}: {bal} —Ä–æ—Å—Ç–∏")
        else:
            user = message.from_user
            if not user:
                return
            bal = get_balance_db(user.id)
            await message.reply(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} —Ä–æ—Å—Ç–∏")
    except:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

@router.message(Command("–ø—Ä–æ—Ñ–∏–ª—å"))
async def profile_handler(message: types.Message):
    target_user = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        target_user = message.from_user

    if not target_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    uid = target_user.id
    
    try:
        name = get_nickname_db(uid) or target_user.first_name or target_user.username or str(uid)
    except:
        name = str(uid)
        
    balance = get_balance_db(uid)
    
    try:
        usage_count = get_usage_count_db(uid) or 0
    except:
        usage_count = "–Ω/–¥"
        
    shop_info = "–Ω–µ—Ç"
    if has_shop_db(uid):
        shop = get_shop_db(uid)
        if shop:
            shop_info = f"ü™ê ¬´{shop['name']}¬ª"
            
    role_info = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
    if uid in USER_ROLES:
        role_text = USER_ROLES[uid]
        role_info = f"¬´{role_text[:40]}{'...' if len(role_text) > 40 else ''}¬ª"
    elif GLOBAL_ROLE:
        role_info = "–≥–ª–æ–±–∞–ª—å–Ω–∞—è"

    profile_text = (
        f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å: {name}**\n"
        "--------------------------------\n"
        f"**ID:** `{uid}`\n"
        f"**üí∞ –ë–∞–ª–∞–Ω—Å:** {balance} —Ä–æ—Å—Ç–∏\n"
        f"**ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò:** {usage_count} —Ä–∞–∑\n"
        f"**ü™ê –ú–∞–≥–∞–∑–∏–Ω:** {shop_info}\n"
        f"**üé≠ –†–æ–ª—å –ò–ò:** {role_info}\n"
        "--------------------------------"
    )
    
    await message.reply(profile_text, parse_mode=ParseMode.MARKDOWN)

@router.message(Command("help", "—Ö–µ–ª–ø", "–∫–æ–º–∞–Ω–¥—ã"))
async def help_handler(message: types.Message):
    help_text = """
ü§ñ <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>

<b>üí¨ –ò–ò –∏ –æ–±—â–µ–Ω–∏–µ:</b>
<blockquote>/–∏–∏ <—Ç–µ–∫—Å—Ç> - –∑–∞–ø—Ä–æ—Å –∫ –ò–ò (–≥—Ä—É–ø–ø—ã)
/—Ä–æ–ª—å <—Ç–µ–∫—Å—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ò–ò
/—Ä–æ–ª—å —Å–±—Ä–æ—Å - —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å
/—Ä–æ–ª—å <–Ω–æ–º–µ—Ä (1-3)> - –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å
/—Ä–æ–ª—å –∑–∞–¥–∞—Ç—å <–Ω–æ–º–µ—Ä (1-3)> <—Ç–µ–∫—Å—Ç> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–ª—å
/—Ä–æ–ª—å –≥–ª–æ–±–∞–ª <—Ç–µ–∫—Å—Ç> - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–æ–ª—å (–≤–ª–∞–¥–µ–ª–µ—Ü)
/—Ä–µ—Å–µ—Ç - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–õ–°)
/–ª—Å - –≤–∫–ª/–≤—ã–∫–ª –ò–ò –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</blockquote>

<b>üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>
<blockquote>/–ø–Ω–≥ <—Ç–µ–∫—Å—Ç> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (300 —Ä–æ—Å—Ç–∏)
/–≤–∏–¥–µ–æ <—Ç–µ–∫—Å—Ç> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (3000 —Ä–æ—Å—Ç–∏)
/–º–µ–º <—Ç–µ–º–∞> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞/—à—É—Ç–∫–∏ (200 —Ä–æ—Å—Ç–∏)
/—Å—Ç–∏–∫–µ—Ä <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä (800 —Ä–æ—Å—Ç–∏)
/–≥–æ–ª–æ—Å <—Ç–µ–∫—Å—Ç> - –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç (60 —Ä–æ—Å—Ç–∏)
/–≥–æ–ª–æ—Å —Ä–µ–∂–∏–º - –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –≤ –õ–° (60 —Ä–æ—Å—Ç–∏/–æ—Ç–≤–µ—Ç)</blockquote>

<b>üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>
<blockquote>/–±–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Ä–æ—Å—Ç–∏
/–±–∞–ª–∞–Ω—Å (–æ—Ç–≤–µ—Ç) - –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/–≤–æ—Ä–∫ - –¥–æ–±—ã—Ç—å —É–≥–æ–ª—å (5-150 —Ä–æ—Å—Ç–∏, 15—Å–µ–∫ –∫–¥)
/–ø–µ—Ä–µ–≤–æ–¥ <—Å—É–º–º–∞> @user - –ø–µ—Ä–µ–≤–æ–¥ —Ä–æ—Å—Ç–∏
/–¥–µ–ø <—Å—É–º–º–∞> - –∫–∞–∑–∏–Ω–æ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞</blockquote>

<b>ü™ê –ú–∞–≥–∞–∑–∏–Ω:</b>
<blockquote>/–º–∞–≥–∞–∑–∏–Ω - –∫—É–ø–∏—Ç—å/–∏–Ω—Ñ–æ –æ –º–∞–≥–∞–∑–∏–Ω–µ (1000 —Ä–æ—Å—Ç–∏)
/–º–∞–≥–∞–∑–∏–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ <—Ç–µ–∫—Å—Ç> - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
/–º–∞–≥–∞–∑–∏–Ω —Å–æ–±—Ä–∞—Ç—å - —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω)</blockquote>

<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>
<blockquote>/–ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/–ø—Ä–æ—Ñ–∏–ª—å (–æ—Ç–≤–µ—Ç) - –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/–Ω–∏–∫ <–Ω–∏–∫> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º (110 —Ä–æ—Å—Ç–∏)
/–Ω–∏–∫ —Å–±—Ä–æ—Å - —É–¥–∞–ª–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º</blockquote>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
<blockquote>/—Ç–∞–±–ª - —Ç–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò
/—Ç–∞–±–ª —Ä - —Ç–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Ä–æ—Å—Ç–∏</blockquote>

<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–ª–∞–¥–µ–ª–µ—Ü):</b>
<blockquote>/–ø—Ä–∞–≤–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–æ–ª–∏
/–ø—Ä–∞–≤–∞ –∫—É–ø–∏—Ç—å - –∫—É–ø–∏—Ç—å –ø—Ä–∞–≤–∞ (500 —Ä–æ—Å—Ç–∏)
/–¥–∞—Ç—å —Ä–æ—Å—Ç–∏ <—Å—É–º–º–∞> - –≤—ã–¥–∞—Ç—å —Ä–æ—Å—Ç–∏ (–æ—Ç–≤–µ—Ç)
/—á—Å - –ø–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
/—á—Å –¥–æ–± - –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–° (–æ—Ç–≤–µ—Ç)
/—á—Å —É–±—Ä - —É–±—Ä–∞—Ç—å –∏–∑ –ß–° (–æ—Ç–≤–µ—Ç)
/sdx - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ-–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π #sdx</blockquote>

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
<blockquote>/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/—Ö–µ–ª–ø - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
–±–æ—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</blockquote>

<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>
<blockquote>- –í –õ–° –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
- –†–æ–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò
- –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥</blockquote>
"""
    
    try:
        await message.reply(help_text, parse_mode=ParseMode.HTML)
    except:
        await message.reply(help_text.replace("**", "").replace("‚Ä¢", "-"))

@router.message(Command("–ø–µ—Ä–µ–≤–æ–¥"))
async def transfer_handler(message: types.Message, bot: Bot, command: CommandObject):
    sender = message.from_user
    if not sender:
        return
    sid = sender.id

    args = command.args or ""
    parts = args.split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/–ø–µ—Ä–µ–≤–æ–¥ <—Å—É–º–º–∞> @username\n–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å /–ø–µ—Ä–µ–≤–æ–¥ <—Å—É–º–º–∞>")
        return

    try:
        amount = int(parts[0])
    except:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ). –ü—Ä–∏–º–µ—Ä: /–ø–µ—Ä–µ–≤–æ–¥ 500 @user")
        return

    if amount <= 0:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        return

    target_user = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        if len(parts) >= 2:
            target_str = parts[1].strip()
            if target_str.startswith("@"):
                target_str = target_str[1:]
            try:
                target_user = await bot.get_chat(target_str)
            except:
                try:
                    uid = int(target_str)
                    target_user = await bot.get_chat(uid)
                except:
                    target_user = None

    if not target_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return

    tid = target_user.id
    if tid == sid:
        await message.reply("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–æ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        return

    bal = get_balance_db(sid)
    if bal < amount:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: {amount}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
        return

    change_balance_db(sid, -amount)
    change_balance_db(tid, amount)

    new_bal = get_balance_db(sid)
    try:
        recipient_name = target_user.username or target_user.first_name or str(tid)
    except:
        recipient_name = str(tid)

    out = (
        "```\n"
        "–ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "------------------------------\n"
        f"–æ—Ç: {getattr(sender, 'first_name', sid)} ({sid})\n"
        f"–∫–æ–º—É: {recipient_name} ({tid})\n"
        f"—Å—É–º–º–∞: {amount} —Ä–æ—Å—Ç–∏\n"
        f"–±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {new_bal} —Ä–æ—Å—Ç–∏\n"
        "------------------------------\n"
        "–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ ‚úÖ\n"
        "```"
    )
    await message.reply(out, parse_mode=ParseMode.MARKDOWN)

@router.message(Command("–¥–∞—Ç—å"))
async def give_handler(message: types.Message, bot: Bot, command: CommandObject):
    args = command.args or ""
    parts = args.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–¥–∞—Ç—å —Ä–æ—Å—Ç–∏ <—Å—É–º–º–∞> (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏–ª–∏ /–¥–∞—Ç—å —Ä–æ—Å—Ç–∏ <—Å—É–º–º–∞> @username")
        return

    sub = parts[0].strip().lower()
    if sub not in ("—Ä–æ—Å—Ç–∏", "rosti", "rosty"):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /–¥–∞—Ç—å —Ä–æ—Å—Ç–∏ <—Å—É–º–º–∞>")
        return

    amount = None
    if len(parts) >= 2:
        try:
            amount = int(parts[1])
        except:
            amount = None

    target = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target = message.reply_to_message.from_user
    
    if not target:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å —Ä–æ—Å—Ç–∏.")
        return

    if amount is None or amount <= 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    await ensure_owner_cached(bot)
    if message.from_user.id not in OWNERS:
        await message.reply("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—Ä—É—á–Ω—É—é –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ—Å—Ç–∏.")
        return

    new = change_balance_db(target.id, amount)
    await message.reply(f"–í—ã–¥–∞–Ω–æ {amount} —Ä–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {getattr(target, 'first_name', target.id)}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new}")

@router.message(Command("–ø—Ä–∞–≤–∞"))
async def rights_handler(message: types.Message, bot: Bot, command: CommandObject):
    caller = message.from_user
    if not caller:
        return

    owner = await ensure_owner_cached(bot)
    args = command.args or ""
    sub = args.strip().lower()

    if sub.startswith("–∫—É–ø") or sub.startswith("buy"):
        caller_id = caller.id
        price = 500
        if caller_id in ROLE_EDITORS:
            await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
            return
        bal = get_balance_db(caller_id)
        if bal < price:
            await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏. –¶–µ–Ω–∞: {price}. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
            return
        new_bal = change_balance_db(caller_id, -price)
        add_role_editor_db(caller_id)
        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø—Ä–∞–≤–æ –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ –∑–∞ {price} —Ä–æ—Å—Ç–∏. –ë–∞–ª–∞–Ω—Å: {new_bal}")
        return

    await ensure_owner_cached(bot)
    if not OWNERS:
        await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if caller.id not in OWNERS:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
        return

    if message.reply_to_message and message.reply_to_message.from_user:
        target = message.reply_to_message.from_user
        if target.id == owner:
            await message.reply("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
        if target.id in ROLE_EDITORS:
            remove_role_editor_db(target.id)
            await message.reply(f"–ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã —Å {getattr(target, 'first_name', target.id)} ‚úÖ")
        else:
            add_role_editor_db(target.id)
            await message.reply(f"–ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã {getattr(target, 'first_name', target.id)} ‚úÖ")
        return

    if not ROLE_EDITORS:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–æ–º –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
        return

    lines = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–æ–º –º–µ–Ω—è—Ç—å —Ä–æ–ª—å:"]
    for uid in sorted(ROLE_EDITORS):
        try:
            u = await bot.get_chat(uid)
            name = u.username or u.first_name or str(uid)
        except:
            name = str(uid)
        lines.append(f"- {name} ({uid})")

    await message.reply("\n".join(lines))

@router.message(Command("—á—Å"))
async def blacklist_handler(message: types.Message, bot: Bot, command: CommandObject):
    caller = message.from_user
    if not caller:
        return
    
    await ensure_owner_cached(bot)
    if not OWNERS or caller.id not in OWNERS:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
        return
    
    args = command.args or ""
    sub = args.strip().lower()
    
    if not sub:
        if not BLACKLIST:
            await message.reply("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        
        lines = ["üë§ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):"]
        for uid in sorted(BLACKLIST):
            try:
                u = await bot.get_chat(uid)
                name = u.username or u.first_name or str(uid)
            except:
                name = str(uid)
            lines.append(f"‚Ä¢ {name} ({uid})")
        
        await message.reply("\n".join(lines))
        return
    
    if sub.startswith("–¥–æ–±") or sub.startswith("add"):
        if not message.reply_to_message or not message.reply_to_message.from_user:
            await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°.")
            return
        
        target = message.reply_to_message.from_user
        if target.id in OWNERS:
            await message.reply("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
            return
        
        if target.id in BLACKLIST:
            await message.reply(f"{getattr(target, 'first_name', target.id)} —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
            return
        
        add_to_blacklist_db(target.id)
        await message.reply(f"‚úÖ {getattr(target, 'first_name', target.id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ò–ò –¥–ª—è –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    if sub.startswith("—É–±—Ä") or sub.startswith("rem") or sub.startswith("del"):
        if not message.reply_to_message or not message.reply_to_message.from_user:
            await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –ß–°.")
            return
        
        target = message.reply_to_message.from_user
        if target.id not in BLACKLIST:
            await message.reply(f"{getattr(target, 'first_name', target.id)} –Ω–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
            return
        
        remove_from_blacklist_db(target.id)
        await message.reply(f"‚úÖ {getattr(target, 'first_name', target.id)} —É–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    
    await message.reply(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/—á—Å - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/—á—Å –¥–æ–± (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –¥–æ–±–∞–≤–∏—Ç—å\n"
        "/—á—Å —É–±—Ä (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - —É–±—Ä–∞—Ç—å"
    )

@router.message(F.text.regexp(r"(?i)^\s*–±–æ—Ç\s*$"))
async def bot_presence_reply(message: types.Message):
    await message.reply(
        "<blockquote>–ù–∞ –º–µ—Å—Ç–µ‚úÖ</blockquote>",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("—á–∏–ø—Å—ã"))
async def chips_reply(message: types.Message):
    await message.reply(
        """
        –æ–ø–∞ –¥–æ—Å—Ç–∞–≤–∞–π –∫–∞—Ä–º–∞–Ω–Ω—ã—ã –æ–æ –∞ —á—ë —ç—Ç–æ —É —Ç–µ–±—è –ø—Ä–µ–¥–º–µ—Ç—ã
        <blockquote>–ø—Ä–µ–¥–º–µ—Ç—ã: –Ω–∞–π–¥–µ–Ω—ã
        –∫–∞—Ä—Ç–µ–ª—å: –≤—ã–∑–≤–∞–Ω
        –ø—Ä–∏–µ–¥–µ—Ç: 13:57
        –º—Ñ—Ü: –∑–ª–æ
        —á–∏–ø—Å—ã: —Å–æ–∑–¥–∞–Ω—ã
        —Å–≤–∞–≥–∞:–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç</blockquote>
        """,
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
@router.message(F.chat.type == "private", F.text | F.photo)
async def private_chat_handler(message: types.Message, bot: Bot):
    """Handle all text messages and photos in private chats - forward them to AI."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
    if is_bot_user(message.from_user):
        return
    
    if not gemini_client:
        await message.reply("–û—à–∏–±–∫–∞: Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    text = message.text or message.caption or ''
    if text.strip().startswith('/'):
        return
    
    user = message.from_user
    user_id = user.id if user else None
    
    if user_id and user_id in DISABLED_PRIVATE_USERS:
        return
    
    # Check ignore tags
    if user_has_ignore_tag(user):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ text –∏–ª–∏ caption
    prompt_text = message.text or message.caption
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if not prompt_text and message.photo:
        prompt_text = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    
    if not prompt_text:
        return
    
    await process_ai_request(bot, message, prompt_text, skip_notification=True)

# Helper function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤
async def process_ai_request(bot: Bot, message: types.Message, prompt_text: str, skip_notification: bool = False) -> None:
    """Process an AI request with the given prompt text and optional image."""
    
    if is_bot_user(message.from_user):
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id if message.from_user else None
    
    # Apply SDX auto-blacklist rule
    try:
        if SDX_AUTO_BLACKLIST and message.from_user:
            fn = message.from_user.first_name or ''
            ln = message.from_user.last_name or ''
            combined = f"{fn} {ln}".lower()
            if "#sdx" in combined:
                if user_id and user_id not in BLACKLIST:
                    add_to_blacklist_db(user_id)
    except:
        pass
    
    # Check blacklist
    if user_id and user_id in BLACKLIST:
        try:
            await message.reply("‚ùå –í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        except:
            pass
        return
    
    # Track usage
    if message.from_user:
        increment_usage(message.from_user)
    
    # Dedupe check
    if not skip_notification:
        msg_id = message.message_id
        key = (chat_id, msg_id)
        if key in PROCESSED_MESSAGES:
            return
        PROCESSED_MESSAGES.add(key)
        asyncio.create_task(_remove_processed_after(key, PROCESSED_TTL))
    
    notify = None
    if not skip_notification:
        try:
            notify = await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –ò–ò...")
        except:
            return
    
    async def call_gemini_async(prompt: str, image_data: bytes = None, image_mime: str = None):
        try:
            # Get user's custom role
            role = DEFAULT_ROLE
            if user_id and user_id in USER_ROLES:
                role = USER_ROLES[user_id]
            elif GLOBAL_ROLE:
                role = GLOBAL_ROLE
            
            history = get_chat_history(user_id, chat_id) if chat_id == user_id else ""
            
            role_parts = []
            
            # Nickname logic
            try:
                nick = get_nickname_db(user_id) if user_id else None
                if nick:
                    role_parts.append(
                        f"–æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ–≥–¥–∞ –∫–∞–∫ ¬´{nick}¬ª. –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –Ω–∏–∫ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏."
                    )
            except:
                pass
            
            role_parts.extend([
                "–¢–´ –°–ï–ô–ß–ê–° –í –†–û–õ–ò. –≠–¢–û –¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨, –ù–ï –û–ü–ò–°–´–í–ê–ô –ï–Å - –ñ–ò–í–ò –ï–ô:",
                role,
                "\n–ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã '—Ä–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å' –∏–ª–∏ '–∏–∏'. –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–ø–∏—Å—ã–≤–∞–π —Å–≤–æ—é —Ä–æ–ª—å - –ø—Ä–æ—Å—Ç–æ –≤–µ–¥–∏ —Å–µ–±—è —Å–æ–≥–ª–∞—Å–Ω–æ –µ–π.",
                "–≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –≤—Ö–æ–¥ –≤–∏–¥–∞: '<–ø—Ä–æ–º–ø—Ç> (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: <—Ç–µ–∫—Å—Ç>)' "
                "–∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ —É—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."
            ])
            
            role_parts.append(
                "–µ—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∫—Ä–∞–π–Ω—è—è (–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã, —Å–∏–ª—å–Ω–∞—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è —ç–º–æ—Ü–∏—è), "
                "–¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ –º–∞—à–∏–Ω–Ω—ã–π —Ç–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [EMO:angry] –∏–ª–∏ [EMO:sad] ‚Äî —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö."
            )
            
            if history:
                role_parts.append("\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n" + history)
            
            role_parts.append("\n–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∞—è—Å—å –í –†–û–õ–ò:")
            
            full_prompt = "\n\n".join([*role_parts, prompt])
            
            # HTTP –∑–∞–ø—Ä–æ—Å –∫ Gemini API
            url = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
            
            parts = [{"text": full_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if image_data and image_mime:
                parts.append({
                    "inline_data": {
                        "mime_type": image_mime,
                        "data": base64.b64encode(image_data).decode('utf-8')
                    }
                })
            
            payload = {"contents": [{"parts": parts}]}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=60)) as response:
                    if response.status != 200:
                        return "–û—à–∏–±–∫–∞ API", None
                    
                    data = await response.json()
                    
                    if "candidates" in data and len(data["candidates"]) > 0:
                        candidate = data["candidates"][0]
                        if "content" in candidate and "parts" in candidate["content"]:
                            raw_text = candidate["content"]["parts"][0].get("text", "")
                            
                            # Extract emotion tag
                            emo_match = re.search(r"\[\s*EMO\s*:\s*(angry|sad)\s*\]\s*$", raw_text, flags=re.IGNORECASE)
                            detected_emotion = emo_match.group(1).lower() if emo_match else None
                            
                            if emo_match:
                                visible_text = raw_text[:emo_match.start()].rstrip()
                            else:
                                visible_text = raw_text
                            
                            result_text = visible_text
                            
                            # Update history for private chats
                            if chat_id == user_id:
                                update_chat_history(user_id, chat_id, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", prompt)
                                update_chat_history(user_id, chat_id, "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", result_text)
                            
                            return result_text, detected_emotion
                    
                    return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini", None
        
        except Exception as e:
            error_msg = str(e).lower()
            if "api" in error_msg and "key" in error_msg:
                return "Gemini: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á", None
            elif "quota" in error_msg or "limit" in error_msg:
                return "Gemini: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
            else:
                return f"–û—à–∏–±–∫–∞: {str(e)}", None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = None
    image_mime = None
    
    if message.photo:
        try:
            if notify:
                await notify.edit_text("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            image_data = await bot.download_file(file.file_path)
            image_data = image_data.read()
            image_mime = "image/jpeg"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    elif message.reply_to_message and message.reply_to_message.photo:
        try:
            if notify:
                await notify.edit_text("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞...")
            
            photo = message.reply_to_message.photo[-1]
            file = await bot.get_file(photo.file_id)
            image_data = await bot.download_file(file.file_path)
            image_data = image_data.read()
            image_mime = "image/jpeg"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # Serialize requests per chat
    lock = CHAT_LOCKS.setdefault(chat_id, asyncio.Lock())
    try:
        async with lock:
            result, detected_emotion = await call_gemini_async(prompt_text, image_data, image_mime)
    except:
        result, detected_emotion = await call_gemini_async(prompt_text, image_data, image_mime)
    
    # Truncate if needed
    try:
        if isinstance(result, str) and len(result) > MAX_VISIBLE_LEN:
            result = result[:MAX_VISIBLE_LEN]
    except:
        pass
    
    result = sanitize_text(result, max_len=1900)
    
    # Send reply
    try:
        sent_msg = None
        if notify:
            try:
                edited = await notify.edit_text(result)
                sent_msg = edited
            except:
                sent_msg = await message.reply(result)
        else:
            sent_msg = await message.reply(result)
        
        # Auto-voice in private chats
        try:
            if user_id and chat_id == user_id and user_id in VOICE_MODE_USERS:
                voice_cost = 60
                bal = get_balance_db(user_id)
                if bal >= voice_cost:
                    change_balance_db(user_id, -voice_cost)
                    
                    voice_text = result[:500] if len(result) > 500 else result
                    
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                        tmp_path = tmp_file.name
                    
                    try:
                        tts = gTTS(text=voice_text, lang='ru')
                        tts.save(tmp_path)
                        
                        voice = FSInputFile(tmp_path)
                        await message.answer_voice(
                            voice=voice,
                            caption=f"üé§ –ê–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ | üí∞ -{voice_cost} —Ä–æ—Å—Ç–∏"
                        )
                    finally:
                        try:
                            os.unlink(tmp_path)
                        except:
                            pass
                else:
                    VOICE_MODE_USERS.discard(user_id)
                    await message.answer("üîá –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ—Å—Ç–∏")
        except:
            pass
        
        # Send sticker if emotion detected
        try:
            if AUTO_SEND_STICKER and sent_msg:
                used_emotion = detected_emotion if detected_emotion else detect_emotion_from_input(prompt_text, message.text or '')
                if used_emotion:
                    sticker_id = STICKER_MAP.get(used_emotion)
                    if sticker_id and not sticker_id.startswith("REPLACE_WITH_"):
                        await message.answer_sticker(sticker_id)
        except:
            pass
    
    except Exception:
        if notify:
            try:
                await notify.edit_text(result)
            except:
                await message.reply(result)
        else:
            await message.reply(result)

# Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–∏–∏
@router.message(Command("–∏–∏"))
async def ai_command_handler(message: types.Message, bot: Bot, command: CommandObject):
    """Handle /–∏–∏ command in groups and private chats."""
    
    if is_bot_user(message.from_user):
        return
    
    if not gemini_client:
        await message.reply("–û—à–∏–±–∫–∞: Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    user = message.from_user
    chat_id = message.chat.id
    
    if user and chat_id == user.id and user_has_ignore_tag(user):
        return
    
    # Extract prompt
    prompt_text = None
    args = command.args
    has_photo = bool(message.photo)
    
    if message.reply_to_message and args:
        replied_raw = message.reply_to_message.text or message.reply_to_message.caption or ""
        replied_sanitized = replied_raw.replace("*", "")
        replied_sanitized = re.sub(r"\s+", " ", replied_sanitized).strip()
        prompt_text = f"{args} (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {replied_sanitized})"
    elif message.reply_to_message and not args:
        prompt_text = message.reply_to_message.text or message.reply_to_message.caption
    else:
        if args:
            prompt_text = args
        elif has_photo:
            prompt_text = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?"
    
    if not prompt_text:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç: `/–∏–∏ <—Ç–µ–∫—Å—Ç>`, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∏–∏.")
        return
    
    prompt_text = sanitize_text(prompt_text, max_len=1900)
    await process_ai_request(bot, message, prompt_text)


# --------------------------- MAIN ---------------------------
async def main():
    """Initialize and start the bot."""
    global gemini_client, GEMINI_API_KEY
    
    # Initialize Gemini
    if GEMINI_API_KEY:
        try:
            gemini_client = True
            print("‚úÖ Gemini API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (HTTP —Ä–µ–∂–∏–º)")
            print("Ya gaga pidoker")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini: {e}")
    else:
        print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ /–∏–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # Initialize database
    init_db()
    
    # Load persistent state
    try:
        load_persistent_state()
    except:
        pass
    
    # Add external owner
    try:
        add_owner_db(5999801817)
        print("–î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü: 5999801817")
    except:
        pass
    
    # Initialize bot and dispatcher
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # Register router
    dp.include_router(router)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # Start polling
    await dp.start_polling(bot)

from aiohttp import web

async def health_check(request):
    return web.Response(text="OK")

async def start_web_server():
    app = web.Application()
    app.router.add_get('/kaithheathcheck', health_check)
    app.router.add_get('/', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

if __name__ == "__main__":
    await start_web_server()
    asyncio.run(main())
